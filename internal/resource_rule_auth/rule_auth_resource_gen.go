// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_rule_auth

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func RuleAuthResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"action": schema.StringAttribute{
				Computed: true,
			},
			"action_config": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"auth_pass": schema.StringAttribute{
						Computed: true,
					},
					"auth_user": schema.StringAttribute{
						Computed: true,
					},
				},
				CustomType: ActionConfigType{
					ObjectType: types.ObjectType{
						AttrTypes: ActionConfigValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"auth_pass": schema.StringAttribute{
				Required: true,
			},
			"auth_user": schema.StringAttribute{
				Required: true,
			},
			"cookie_name": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"country": schema.StringAttribute{
				Optional: true,
				Computed: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"country_is",
						"country_is_not",
					),
				},
			},
			"country_is": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"country_is_not": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"disabled": schema.BoolAttribute{
				Optional: true,
				Computed: true,
				Default:  booldefault.StaticBool(false),
			},
			"domain": schema.StringAttribute{
				Optional: true,
				Computed: true,
				Default:  stringdefault.StaticString("any"),
			},
			"ip": schema.StringAttribute{
				Optional: true,
				Computed: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"ip_is",
						"ip_is_not",
					),
				},
			},
			"ip_is": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"ip_is_not": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"method": schema.StringAttribute{
				Optional: true,
				Computed: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"method_is",
						"method_is_not",
					),
				},
			},
			"method_is": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"method_is_not": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"name": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"only_with_cookie": schema.BoolAttribute{
				Optional: true,
				Computed: true,
				Default:  booldefault.StaticBool(false),
			},
			"organization": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"project": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"rule": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"url": schema.ListAttribute{
				ElementType: types.StringType,
				Required:    true,
			},
			"uuid": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
		},
	}
}

type RuleAuthModel struct {
	Action         types.String      `tfsdk:"action"`
	ActionConfig   ActionConfigValue `tfsdk:"action_config"`
	AuthPass       types.String      `tfsdk:"auth_pass"`
	AuthUser       types.String      `tfsdk:"auth_user"`
	CookieName     types.String      `tfsdk:"cookie_name"`
	Country        types.String      `tfsdk:"country"`
	CountryIs      types.List        `tfsdk:"country_is"`
	CountryIsNot   types.List        `tfsdk:"country_is_not"`
	Disabled       types.Bool        `tfsdk:"disabled"`
	Domain         types.String      `tfsdk:"domain"`
	Ip             types.String      `tfsdk:"ip"`
	IpIs           types.List        `tfsdk:"ip_is"`
	IpIsNot        types.List        `tfsdk:"ip_is_not"`
	Method         types.String      `tfsdk:"method"`
	MethodIs       types.List        `tfsdk:"method_is"`
	MethodIsNot    types.List        `tfsdk:"method_is_not"`
	Name           types.String      `tfsdk:"name"`
	OnlyWithCookie types.Bool        `tfsdk:"only_with_cookie"`
	Organization   types.String      `tfsdk:"organization"`
	Project        types.String      `tfsdk:"project"`
	Rule           types.String      `tfsdk:"rule"`
	Url            types.List        `tfsdk:"url"`
	Uuid           types.String      `tfsdk:"uuid"`
}

var _ basetypes.ObjectTypable = ActionConfigType{}

type ActionConfigType struct {
	basetypes.ObjectType
}

func (t ActionConfigType) Equal(o attr.Type) bool {
	other, ok := o.(ActionConfigType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ActionConfigType) String() string {
	return "ActionConfigType"
}

func (t ActionConfigType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	authPassAttribute, ok := attributes["auth_pass"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_pass is missing from object`)

		return nil, diags
	}

	authPassVal, ok := authPassAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_pass expected to be basetypes.StringValue, was: %T`, authPassAttribute))
	}

	authUserAttribute, ok := attributes["auth_user"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_user is missing from object`)

		return nil, diags
	}

	authUserVal, ok := authUserAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_user expected to be basetypes.StringValue, was: %T`, authUserAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ActionConfigValue{
		AuthPass: authPassVal,
		AuthUser: authUserVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewActionConfigValueNull() ActionConfigValue {
	return ActionConfigValue{
		state: attr.ValueStateNull,
	}
}

func NewActionConfigValueUnknown() ActionConfigValue {
	return ActionConfigValue{
		state: attr.ValueStateUnknown,
	}
}

func NewActionConfigValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ActionConfigValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ActionConfigValue Attribute Value",
				"While creating a ActionConfigValue value, a missing attribute value was detected. "+
					"A ActionConfigValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ActionConfigValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ActionConfigValue Attribute Type",
				"While creating a ActionConfigValue value, an invalid attribute value was detected. "+
					"A ActionConfigValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ActionConfigValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ActionConfigValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ActionConfigValue Attribute Value",
				"While creating a ActionConfigValue value, an extra attribute value was detected. "+
					"A ActionConfigValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ActionConfigValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewActionConfigValueUnknown(), diags
	}

	authPassAttribute, ok := attributes["auth_pass"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_pass is missing from object`)

		return NewActionConfigValueUnknown(), diags
	}

	authPassVal, ok := authPassAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_pass expected to be basetypes.StringValue, was: %T`, authPassAttribute))
	}

	authUserAttribute, ok := attributes["auth_user"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auth_user is missing from object`)

		return NewActionConfigValueUnknown(), diags
	}

	authUserVal, ok := authUserAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auth_user expected to be basetypes.StringValue, was: %T`, authUserAttribute))
	}

	if diags.HasError() {
		return NewActionConfigValueUnknown(), diags
	}

	return ActionConfigValue{
		AuthPass: authPassVal,
		AuthUser: authUserVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewActionConfigValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ActionConfigValue {
	object, diags := NewActionConfigValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewActionConfigValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ActionConfigType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewActionConfigValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewActionConfigValueUnknown(), nil
	}

	if in.IsNull() {
		return NewActionConfigValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewActionConfigValueMust(ActionConfigValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ActionConfigType) ValueType(ctx context.Context) attr.Value {
	return ActionConfigValue{}
}

var _ basetypes.ObjectValuable = ActionConfigValue{}

type ActionConfigValue struct {
	AuthPass basetypes.StringValue `tfsdk:"auth_pass"`
	AuthUser basetypes.StringValue `tfsdk:"auth_user"`
	state    attr.ValueState
}

func (v ActionConfigValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["auth_pass"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["auth_user"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.AuthPass.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["auth_pass"] = val

		val, err = v.AuthUser.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["auth_user"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ActionConfigValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ActionConfigValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ActionConfigValue) String() string {
	return "ActionConfigValue"
}

func (v ActionConfigValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"auth_pass": basetypes.StringType{},
			"auth_user": basetypes.StringType{},
		},
		map[string]attr.Value{
			"auth_pass": v.AuthPass,
			"auth_user": v.AuthUser,
		})

	return objVal, diags
}

func (v ActionConfigValue) Equal(o attr.Value) bool {
	other, ok := o.(ActionConfigValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AuthPass.Equal(other.AuthPass) {
		return false
	}

	if !v.AuthUser.Equal(other.AuthUser) {
		return false
	}

	return true
}

func (v ActionConfigValue) Type(ctx context.Context) attr.Type {
	return ActionConfigType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ActionConfigValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"auth_pass": basetypes.StringType{},
		"auth_user": basetypes.StringType{},
	}
}
