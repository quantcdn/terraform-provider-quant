// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_crawler

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func CrawlerResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"browser_mode": schema.BoolAttribute{
				Optional: true,
				Computed: true,
			},
			"config": schema.StringAttribute{
				Computed: true,
			},
			"crawler": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Crawler uuid",
				MarkdownDescription: "Crawler uuid",
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"deleted_at": schema.StringAttribute{
				Computed: true,
			},
			"domain": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"domain_verified": schema.Int64Attribute{
				Computed: true,
			},
			"headers": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{},
				CustomType: HeadersType{
					ObjectType: types.ObjectType{
						AttrTypes: HeadersValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
			"id": schema.Int64Attribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"organization": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Organization machine name",
				MarkdownDescription: "Organization machine name",
			},
			"project": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Project machine name",
				MarkdownDescription: "Project machine name",
			},
			"project_id": schema.Int64Attribute{
				Computed: true,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
			"url_list": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"urls_list": schema.ListAttribute{
				ElementType: types.StringType,
				Computed:    true,
			},
			"uuid": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

type CrawlerModel struct {
	BrowserMode    types.Bool   `tfsdk:"browser_mode"`
	Config         types.String `tfsdk:"config"`
	Crawler        types.String `tfsdk:"crawler"`
	CreatedAt      types.String `tfsdk:"created_at"`
	DeletedAt      types.String `tfsdk:"deleted_at"`
	Domain         types.String `tfsdk:"domain"`
	DomainVerified types.Int64  `tfsdk:"domain_verified"`
	Headers        HeadersValue `tfsdk:"headers"`
	Id             types.Int64  `tfsdk:"id"`
	Name           types.String `tfsdk:"name"`
	Organization   types.String `tfsdk:"organization"`
	Project        types.String `tfsdk:"project"`
	ProjectId      types.Int64  `tfsdk:"project_id"`
	UpdatedAt      types.String `tfsdk:"updated_at"`
	UrlList        types.List   `tfsdk:"url_list"`
	UrlsList       types.List   `tfsdk:"urls_list"`
	Uuid           types.String `tfsdk:"uuid"`
}

var _ basetypes.ObjectTypable = HeadersType{}

type HeadersType struct {
	basetypes.ObjectType
}

func (t HeadersType) Equal(o attr.Type) bool {
	other, ok := o.(HeadersType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t HeadersType) String() string {
	return "HeadersType"
}

func (t HeadersType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	if diags.HasError() {
		return nil, diags
	}

	return HeadersValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewHeadersValueNull() HeadersValue {
	return HeadersValue{
		state: attr.ValueStateNull,
	}
}

func NewHeadersValueUnknown() HeadersValue {
	return HeadersValue{
		state: attr.ValueStateUnknown,
	}
}

func NewHeadersValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (HeadersValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing HeadersValue Attribute Value",
				"While creating a HeadersValue value, a missing attribute value was detected. "+
					"A HeadersValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("HeadersValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid HeadersValue Attribute Type",
				"While creating a HeadersValue value, an invalid attribute value was detected. "+
					"A HeadersValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("HeadersValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("HeadersValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra HeadersValue Attribute Value",
				"While creating a HeadersValue value, an extra attribute value was detected. "+
					"A HeadersValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra HeadersValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewHeadersValueUnknown(), diags
	}

	if diags.HasError() {
		return NewHeadersValueUnknown(), diags
	}

	return HeadersValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewHeadersValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) HeadersValue {
	object, diags := NewHeadersValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewHeadersValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t HeadersType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewHeadersValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewHeadersValueUnknown(), nil
	}

	if in.IsNull() {
		return NewHeadersValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewHeadersValueMust(HeadersValue{}.AttributeTypes(ctx), attributes), nil
}

func (t HeadersType) ValueType(ctx context.Context) attr.Value {
	return HeadersValue{}
}

var _ basetypes.ObjectValuable = HeadersValue{}

type HeadersValue struct {
	state attr.ValueState
}

func (v HeadersValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 0)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 0)

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v HeadersValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v HeadersValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v HeadersValue) String() string {
	return "HeadersValue"
}

func (v HeadersValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{},
		map[string]attr.Value{})

	return objVal, diags
}

func (v HeadersValue) Equal(o attr.Value) bool {
	other, ok := o.(HeadersValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	return true
}

func (v HeadersValue) Type(ctx context.Context) attr.Type {
	return HeadersType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v HeadersValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{}
}
