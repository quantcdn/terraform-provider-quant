// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_project

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func ProjectResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"allow_query_params": schema.BoolAttribute{
				Optional: true,
				Computed: true,
			},
			"basic_auth_password": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"basic_auth_preview_only": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"basic_auth_username": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"custom_s3_sync_access_key": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"custom_s3_sync_bucket": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"custom_s3_sync_region": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"custom_s3_sync_secret_key": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"deleted_at": schema.StringAttribute{
				Computed: true,
			},
			"git_url": schema.StringAttribute{
				Computed: true,
			},
			"id": schema.Int64Attribute{
				Computed: true,
			},
			"machine_name": schema.StringAttribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"organisation_id": schema.Int64Attribute{
				Computed: true,
			},
			"organization": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Organization machine name",
				MarkdownDescription: "Organization machine name",
			},
			"project": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Project machine name",
				MarkdownDescription: "Project machine name",
			},
			"project_parent_id": schema.Int64Attribute{
				Computed: true,
			},
			"project_type": schema.StringAttribute{
				Computed: true,
			},
			"region": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"security_score": schema.Int64Attribute{
				Computed: true,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
			"uuid": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

type ProjectModel struct {
	AllowQueryParams      types.Bool   `tfsdk:"allow_query_params"`
	BasicAuthPassword     types.String `tfsdk:"basic_auth_password"`
	BasicAuthPreviewOnly  types.String `tfsdk:"basic_auth_preview_only"`
	BasicAuthUsername     types.String `tfsdk:"basic_auth_username"`
	CreatedAt             types.String `tfsdk:"created_at"`
	CustomS3SyncAccessKey types.String `tfsdk:"custom_s3_sync_access_key"`
	CustomS3SyncBucket    types.String `tfsdk:"custom_s3_sync_bucket"`
	CustomS3SyncRegion    types.String `tfsdk:"custom_s3_sync_region"`
	CustomS3SyncSecretKey types.String `tfsdk:"custom_s3_sync_secret_key"`
	DeletedAt             types.String `tfsdk:"deleted_at"`
	GitUrl                types.String `tfsdk:"git_url"`
	Id                    types.Int64  `tfsdk:"id"`
	MachineName           types.String `tfsdk:"machine_name"`
	Name                  types.String `tfsdk:"name"`
	OrganisationId        types.Int64  `tfsdk:"organisation_id"`
	Organization          types.String `tfsdk:"organization"`
	Project               types.String `tfsdk:"project"`
	ProjectParentId       types.Int64  `tfsdk:"project_parent_id"`
	ProjectType           types.String `tfsdk:"project_type"`
	Region                types.String `tfsdk:"region"`
	SecurityScore         types.Int64  `tfsdk:"security_score"`
	UpdatedAt             types.String `tfsdk:"updated_at"`
	Uuid                  types.String `tfsdk:"uuid"`
}
